// --- VARI√ÅVEIS GLOBAIS ---
let clientesCache = [];
let itensOrcamento = [];
let contadorItemId = 0;
let clienteSelecionadoId = null;
let pdfGerado = null;
let dadosOrcamento = null;

// --- FUN√á√ïES DE FORMATA√á√ÉO E VALIDA√á√ÉO ---
function formatarTelefone(input) { let value = input.value.replace(/\D/g, ''); if (value.length > 10) { value = value.replace(/^(\d{2})(\d{5})(\d{4}).*/, '($1) $2-$3'); } else if (value.length > 2) { value = value.replace(/^(\d{2})(\d{4})(\d{0,4}).*/, '($1) $2-$3'); } else if (value.length > 0) { value = `(${value}`; } input.value = value; }
function formatarCnpjCpf(input) { let valor = input.value.replace(/\D/g, ''); if (valor.length <= 11) { valor = valor.replace(/(\d{3})(\d)/, '$1.$2'); valor = valor.replace(/(\d{3})(\d)/, '$1.$2'); valor = valor.replace(/(\d{3})(\d{1,2})$/, '$1-$2'); } else { valor = valor.replace(/^(\d{2})(\d)/, '$1.$2'); valor = valor.replace(/^(\d{2})\.(\d{3})(\d)/, '$1.$2.$3'); valor = valor.replace(/\.(\d{3})(\d)/, '.$1/$2'); valor = valor.replace(/(\d{4})(\d)/, '$1-$2'); } input.value = valor; }
const isEmailValid = (email) => { if (!email) return true; const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; return emailRegex.test(email); };
function formatarCampoMoeda(input) { let valor = input.value.replace(/\D/g, ''); if (valor === '') { input.value = ''; return; } valor = (parseInt(valor, 10) / 100).toFixed(2) + ''; valor = valor.replace('.', ','); valor = valor.replace(/(\d)(?=(\d{3})+(?!\d),)/g, '$1.'); input.value = valor; }
function parseCurrency(value) { if (!value) return 0; return parseFloat(String(value).replace(/\./g, '').replace(',', '.')) || 0; }
function formatarMoeda(valor) { return valor.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }

// --- FUN√á√ïES PRINCIPAIS DA APLICA√á√ÉO ---
function showApp() { document.getElementById('login-container').classList.add('hidden'); document.getElementById('app-container').classList.remove('hidden'); document.body.style.alignItems = 'flex-start'; carregarClientes(); }
function showLogin() { document.getElementById('login-container').classList.remove('hidden'); document.getElementById('app-container').classList.add('hidden'); document.body.style.alignItems = 'center'; }
async function checkLoginStatus() { try { const response = await fetch('/api/session-check'); if (response.ok) { const data = await response.json(); if (data.loggedIn) { showApp(); } else { showLogin(); } } else { showLogin(); } } catch (error) { showLogin(); } }
async function carregarClientes() { const select = document.getElementById('clienteExistente'); select.innerHTML = '<option value="">-- Carregando clientes... --</option>'; try { const response = await fetch('/api/clientes'); if (!response.ok) throw new Error('Falha ao buscar os clientes.'); const clientes = await response.json(); clientesCache = clientes; select.innerHTML = '<option value="">-- Novo Cliente --</option>'; clientes.forEach(cliente => { const option = new Option(`#${cliente.id} - ${cliente.nome}`, cliente.id); select.appendChild(option); }); } catch (error) { console.error("Erro ao carregar clientes:", error); select.innerHTML = '<option value="">-- Erro ao carregar --</option>'; } }
function selecionarCliente() { const select = document.getElementById('clienteExistente'); clienteSelecionadoId = select.value; const historicoSection = document.getElementById('historico-section'); const historicoContainer = document.getElementById('historico-container'); const clienteSelecionado = clientesCache.find(c => c.id == clienteSelecionadoId); const nomeInput = document.getElementById('clienteNome'); const cnpjCpfInput = document.getElementById('clienteCnpjCpf'); const emailInput = document.getElementById('clienteEmail'); const telefoneInput = document.getElementById('clienteTelefone'); if (clienteSelecionado) { nomeInput.value = clienteSelecionado.nome || ''; cnpjCpfInput.value = clienteSelecionado.cnpj_cpf || ''; emailInput.value = clienteSelecionado.email || ''; telefoneInput.value = clienteSelecionado.telefone || ''; formatarCnpjCpf(cnpjCpfInput); formatarTelefone(telefoneInput); } else { nomeInput.value = ''; cnpjCpfInput.value = ''; emailInput.value = ''; telefoneInput.value = ''; } if (clienteSelecionadoId) { historicoSection.style.display = 'block'; carregarHistoricoOrcamentos(clienteSelecionadoId); } else { historicoSection.style.display = 'none'; historicoContainer.innerHTML = ''; } }
async function salvarCliente() { const clienteNome = document.getElementById('clienteNome').value.trim(); const clienteEmail = document.getElementById('clienteEmail').value.trim(); if (!clienteNome) { alert('O nome do cliente √© obrigat√≥rio.'); return; } if (!isEmailValid(clienteEmail)) { alert('O formato do e-mail √© inv√°lido. Por favor, corrija.'); return; } const clienteData = { nome: clienteNome, cnpj_cpf: document.getElementById('clienteCnpjCpf').value.trim(), email: clienteEmail, telefone: document.getElementById('clienteTelefone').value.trim(), }; try { const response = await fetch('/api/clientes', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(clienteData), }); if (response.ok) { alert(`Cliente "${clienteNome}" salvo com sucesso!`); document.getElementById('clienteExistente').value = ""; selecionarCliente(); carregarClientes(); } else { const errorData = await response.json(); alert(`Erro ao salvar cliente: ${errorData.error || 'Erro desconhecido'}`); } } catch (error) { console.error('Erro de conex√£o ao salvar cliente:', error); alert('Erro de conex√£o. Tente novamente.'); } }

// --- FUN√á√ïES DE OR√áAMENTO E HIST√ìRICO ---
function renderizarTabelaItens() { const container = document.getElementById('itensContainer'); if (itensOrcamento.length === 0) { container.innerHTML = `<div class="empty-state"><h3>Nenhum item adicionado</h3><p>Adicione itens ao or√ßamento.</p></div>`; } else { const tabelaHTML = ` <table class="items-table"> <thead><tr><th>Descri√ß√£o</th><th>Qtd</th><th>Valor Unit.</th><th>Total</th><th>A√ß√µes</th></tr></thead> <tbody> ${itensOrcamento.map(item => ` <tr> <td>${item.descricao}</td> <td>${item.quantidade}</td> <td>${formatarMoeda(item.valorUnitario)}</td> <td>${formatarMoeda(item.valorTotal)}</td> <td><button class="btn btn-danger btn-remover-item" data-id="${item.id}">üóëÔ∏è</button></td> </tr>`).join('')} </tbody> </table> `; container.innerHTML = tabelaHTML; } renderizarOuAtualizarTotais(); }
function renderizarOuAtualizarTotais() { const totaisContainer = document.getElementById('totaisContainer'); if (itensOrcamento.length === 0) { totaisContainer.innerHTML = ''; return; } if (!document.getElementById('total-section-id')) { totaisContainer.innerHTML = ` <div class="total-section" id="total-section-id"> <div class="form-grid" style="grid-template-columns: 2fr 1fr; gap: 10px; margin-bottom: 20px; text-align: left;"> <div class="form-group"> <label for="descontoValor" style="color: white;">Desconto</label> <input type="text" id="descontoValor" placeholder="0" style="padding: 12px 15px; border-radius: 10px; border: none; font-size: 1rem;"> </div> <div class="form-group"> <label for="descontoTipo" style="color: white;">Tipo</label> <select id="descontoTipo" style="padding: 12px 15px; border-radius: 10px; border: none; font-size: 1rem;"> <option value="dinheiro">R$</option> <option value="porcentagem">%</option> </select> </div> </div> <p style="font-size: 1rem; font-weight: 400; text-align: right;">Subtotal: <span id="subtotal-valor"></span></p> <p style="font-size: 1rem; font-weight: 400; text-align: right; margin-bottom: 10px;">Desconto: <span id="desconto-valor-display"></span></p> <h3 style="text-align: right;">Total Geral</h3> <p id="total-geral-valor" style="text-align: right;"></p> </div>`; } atualizarTotais(); }
function atualizarTotais() { if (itensOrcamento.length === 0 || !document.getElementById('total-section-id')) return; const subtotal = itensOrcamento.reduce((acc, item) => acc + item.valorTotal, 0); const descontoValorInput = document.getElementById('descontoValor').value; const descontoTipo = document.getElementById('descontoTipo').value; let descontoCalculado = 0; if (descontoTipo === 'dinheiro') { descontoCalculado = parseCurrency(descontoValorInput); } else { const porcentagem = parseFloat(descontoValorInput.replace(',', '.')) || 0; descontoCalculado = subtotal * (porcentagem / 100); } const totalGeral = subtotal - descontoCalculado; document.getElementById('subtotal-valor').textContent = formatarMoeda(subtotal); document.getElementById('desconto-valor-display').textContent = `- ${formatarMoeda(descontoCalculado)}`; document.getElementById('total-geral-valor').textContent = formatarMoeda(totalGeral); }
function adicionarItem() { const descricao = document.getElementById('itemDescricao').value.trim(); const quantidade = parseInt(document.getElementById('itemQuantidade').value); const valorUnitario = parseCurrency(document.getElementById('itemValorUnitario').value); if (!descricao || isNaN(quantidade) || quantidade <= 0 || isNaN(valorUnitario) || valorUnitario <= 0) { alert('Por favor, preencha todos os campos do item com valores v√°lidos.'); return; } const novoItem = { id: ++contadorItemId, descricao, quantidade, valorUnitario, valorTotal: quantidade * valorUnitario }; itensOrcamento.push(novoItem); renderizarTabelaItens(); document.getElementById('itemDescricao').value = ''; document.getElementById('itemQuantidade').value = '1'; document.getElementById('itemValorUnitario').value = ''; }
function removerItem(itemId) { itensOrcamento = itensOrcamento.filter(item => item.id !== itemId); renderizarTabelaItens(); }

async function carregarHistoricoOrcamentos(clienteId) { const container = document.getElementById('historico-container'); container.innerHTML = '<p>Carregando hist√≥rico...</p>'; try { const response = await fetch(`/api/orcamentos?cliente_id=${clienteId}`); if (!response.ok) throw new Error('Falha ao buscar hist√≥rico.'); const orcamentos = await response.json(); if (orcamentos.length === 0) { container.innerHTML = '<div class="empty-state">Nenhum or√ßamento salvo para este cliente.</div>'; return; } let html = '<ul style="list-style-type: none; padding: 0;">'; orcamentos.forEach(o => { const data = new Date(o.data_criacao).toLocaleDateString('pt-BR'); let acaoBotao = ''; if (o.status === 'Criado') { acaoBotao = `<button class="btn btn-primary btn-avancar-status" data-id="${o.id}" data-status="Aprovado" style="padding: 5px 10px; font-size: 0.8em;">Aprovar</button>`; } else if (o.status === 'Aprovado') { acaoBotao = `<button class="btn btn-success btn-avancar-status" data-id="${o.id}" data-status="Em Produ√ß√£o" style="padding: 5px 10px; font-size: 0.8em;">Iniciar Produ√ß√£o</button>`; } html += `<li style="background: #e9ecef; padding: 10px; border-radius: 8px; margin-bottom: 8px; display: grid; grid-template-columns: 1fr auto auto; gap: 15px; align-items: center;"> <div> <span><strong>${o.codigo_orcamento}</strong> - ${data}</span><br> <span style="font-size: 0.9em; color: #525f7f;">Status: <strong>${o.status}</strong></span> </div> <button class="btn btn-secondary btn-visualizar-orcamento" data-id="${o.id}" style="padding: 5px 10px; font-size: 0.8em;">Visualizar</button> ${acaoBotao} </li>`; }); html += '</ul>'; container.innerHTML = html; } catch (error) { console.error("Erro ao carregar hist√≥rico:", error); container.innerHTML = '<p>Erro ao carregar o hist√≥rico.</p>'; } }
async function atualizarStatusOrcamento(orcamentoId, novoStatus) { if (!confirm(`Tem certeza que deseja alterar o status deste or√ßamento para "${novoStatus}"?`)) { return; } try { const response = await fetch(`/api/orcamentos?orcamento_id=${orcamentoId}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ status: novoStatus }) }); if (response.ok) { alert('Status do or√ßamento atualizado com sucesso!'); carregarHistoricoOrcamentos(clienteSelecionadoId); } else { throw new Error('Falha ao atualizar o status.'); } } catch (error) { console.error("Erro ao atualizar status:", error); alert('N√£o foi poss√≠vel atualizar o status do or√ßamento.'); } }
async function visualizarOrcamento(orcamentoId) { alert(`Carregando dados do or√ßamento...`); try { const response = await fetch(`/api/orcamentos?orcamento_id=${orcamentoId}`); if (!response.ok) throw new Error('N√£o foi poss√≠vel carregar os detalhes do or√ßamento.'); const orcamento = await response.json(); itensOrcamento = orcamento.itens.map(item => ({ id: ++contadorItemId, descricao: item.descricao, quantidade: item.quantidade, valorUnitario: parseFloat(item.valor_unitario), valorTotal: item.quantidade * parseFloat(item.valor_unitario) })); renderizarTabelaItens(); const descontoTipo = document.getElementById('descontoTipo'); const descontoValor = document.getElementById('descontoValor'); if (descontoTipo && descontoValor) { descontoTipo.value = orcamento.desconto_tipo || 'dinheiro'; if (orcamento.desconto_tipo === 'porcentagem') { const subtotal = orcamento.itens.reduce((acc, item) => acc + (item.quantidade * parseFloat(item.valor_unitario)), 0); const porcentagem = subtotal > 0 ? (parseFloat(orcamento.desconto_valor) / subtotal) * 100 : 0; descontoValor.value = porcentagem.toFixed(2).replace('.', ','); } else { descontoValor.value = String(parseFloat(orcamento.desconto_valor).toFixed(2)).replace('.', ','); formatarCampoMoeda(descontoValor); } } document.getElementById('observacoes').value = orcamento.observacoes || ''; } catch (error) { console.error("Erro ao visualizar or√ßamento:", error); alert(error.message); } }
async function salvarOrcamento() { if (!clienteSelecionadoId) { alert('Selecione um cliente para salvar o or√ßamento.'); return; } if (itensOrcamento.length === 0) { alert('Adicione pelo menos um item ao or√ßamento.'); return; } const subtotal = itensOrcamento.reduce((acc, item) => acc + item.valorTotal, 0); const descontoValorInput = document.getElementById('descontoValor').value; const descontoTipo = document.getElementById('descontoTipo').value; let descontoCalculado = 0; if (descontoTipo === 'dinheiro') { descontoCalculado = parseCurrency(descontoValorInput); } else { const porcentagem = parseFloat(descontoValorInput.replace(',', '.')) || 0; descontoCalculado = subtotal * (porcentagem / 100); } const valorTotal = subtotal - descontoCalculado; const orcamentoData = { cliente_id: clienteSelecionadoId, subtotal, desconto_valor: descontoCalculado, desconto_tipo: descontoTipo, valor_total: valorTotal, observacoes: document.getElementById('observacoes').value, itens: itensOrcamento }; try { const response = await fetch('/api/orcamentos', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(orcamentoData) }); if (response.ok) { const result = await response.json(); alert(`Or√ßamento ${result.codigoOrcamento} salvo com sucesso!`); carregarHistoricoOrcamentos(clienteSelecionadoId); } else { const errorData = await response.json(); alert(`Erro ao salvar o or√ßamento: ${errorData.error || 'Erro desconhecido'}`); } } catch (error) { console.error("Erro de conex√£o ao salvar or√ßamento:", error); alert('Erro de conex√£o. Tente novamente.'); } }
function gerarPDF() { /* ... (sem altera√ß√µes) ... */ }
function criarPDF() { /* ... (sem altera√ß√µes) ... */ }
function continuarGeracaoPDF(doc, pageWidth, margin, yPosition) { /* ... (sem altera√ß√µes) ... */ }
function fecharModal() { /* ... (sem altera√ß√µes) ... */ }
function baixarPDF() { /* ... (sem altera√ß√µes) ... */ }
function encaminharWhatsApp() { /* ... (sem altera√ß√µes) ... */ }

// --- INICIALIZA√á√ÉO E EVENTOS ---
document.addEventListener('DOMContentLoaded', () => {
    // L√ìGICA DE LOGIN
    const loginForm = document.getElementById('login-form'); const errorMessage = document.getElementById('error-message'); if (loginForm) { loginForm.addEventListener('submit', async (e) => { e.preventDefault(); const username = document.getElementById('username').value; const password = document.getElementById('password-login').value; errorMessage.textContent = ''; try { const response = await fetch('/api/auth', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ username, password }) }); if (response.ok) { showApp(); } else { const data = await response.json(); errorMessage.textContent = data.error || 'Credenciais inv√°lidas.'; } } catch (error) { errorMessage.textContent = 'Erro de conex√£o. Tente novamente.'; } }); }
    
    // CONECTANDO EVENTOS AOS ELEMENTOS
    const selectCliente = document.getElementById('clienteExistente'); if (selectCliente) { selectCliente.addEventListener('change', selecionarCliente); }
    const btnSalvar = document.getElementById('btnSalvarCliente'); if (btnSalvar) { btnSalvar.addEventListener('click', salvarCliente); }
    const inputCnpjCpf = document.getElementById('clienteCnpjCpf'); if (inputCnpjCpf) { inputCnpjCpf.addEventListener('input', (e) => formatarCnpjCpf(e.target)); }
    const inputTelefone = document.getElementById('clienteTelefone'); if (inputTelefone) { inputTelefone.addEventListener('input', (e) => formatarTelefone(e.target)); }
    const inputValorUnitario = document.getElementById('itemValorUnitario'); if (inputValorUnitario) { inputValorUnitario.addEventListener('input', (e) => formatarCampoMoeda(e.target)); }
    const btnAdicionarItem = document.getElementById('btnAdicionarItem'); if (btnAdicionarItem) { btnAdicionarItem.addEventListener('click', adicionarItem); }
    const itensContainer = document.getElementById('itensContainer'); if (itensContainer) { itensContainer.addEventListener('click', (e) => { const target = e.target.closest('button'); if (target && target.classList.contains('btn-remover-item')) { const itemId = parseInt(target.dataset.id, 10); removerItem(itemId); } }); }
    
    // --- CORRE√á√ÉO: DELEGA√á√ÉO DE EVENTOS PARA OS CAMPOS DE DESCONTO ---
    const totaisContainer = document.getElementById('totaisContainer');
    if (totaisContainer) {
        totaisContainer.addEventListener('input', (e) => {
            if (e.target && e.target.id === 'descontoValor') {
                atualizarTotais();
            }
        });
        totaisContainer.addEventListener('change', (e) => {
            if (e.target && e.target.id === 'descontoTipo') {
                atualizarTotais();
            }
        });
    }

    const historicoContainer = document.getElementById('historico-container');
    if (historicoContainer) {
        historicoContainer.addEventListener('click', (e) => {
            const target = e.target.closest('button');
            if (!target) return;
            if (target.classList.contains('btn-visualizar-orcamento')) {
                const orcamentoId = target.dataset.id;
                visualizarOrcamento(orcamentoId);
            }
            if (target.classList.contains('btn-avancar-status')) {
                const orcamentoId = target.dataset.id;
                const novoStatus = target.dataset.status;
                atualizarStatusOrcamento(orcamentoId, novoStatus);
            }
        });
    }

    const btnGerarPDF = document.getElementById('btnGerarPDF'); if (btnGerarPDF) { btnGerarPDF.addEventListener('click', gerarPDF); }
    const btnSalvarOrcamento = document.getElementById('btnSalvarOrcamento'); if (btnSalvarOrcamento) { btnSalvarOrcamento.addEventListener('click', salvarOrcamento); }
    const btnBaixarPDF = document.getElementById('btnBaixarPDF'); if (btnBaixarPDF) { btnBaixarPDF.addEventListener('click', baixarPDF); }
    const btnWhatsapp = document.getElementById('btnWhatsapp'); if (btnWhatsapp) { btnWhatsapp.addEventListener('click', encaminharWhatsApp); }
    const btnCloseModal = document.getElementById('btnCloseModal'); if (btnCloseModal) { btnCloseModal.addEventListener('click', fecharModal); }
    
    checkLoginStatus();
});
