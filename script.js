// Arquivo: script.js (Vers√£o 1.3.11 - Corrigida)

// --- VARI√ÅVEIS GLOBAIS ---
let clientesCache = [];
let itensOrcamento = [];
let contadorItemId = 0;
let clienteSelecionadoId = null;
let orcamentoAtualId = null;
let orcamentoParaAcaoId = null;

// --- FUN√á√ÉO DE NOTIFICA√á√ÉO ---
function mostrarNotificacao(mensagem, tipo = 'sucesso') { const container = document.getElementById('notification-container'); if (!container) return; const toast = document.createElement('div'); toast.className = `toast ${tipo}`; toast.textContent = mensagem; container.appendChild(toast); setTimeout(() => { toast.remove(); }, 4000); }

// --- FUN√á√ïES DE FORMATA√á√ÉO ---
function formatarTelefone(input) { let value = input.value.replace(/\D/g, ''); if (value.length > 10) { value = value.replace(/^(\d{2})(\d{5})(\d{4}).*/, '($1) $2-$3'); } else if (value.length > 2) { value = value.replace(/^(\d{2})(\d{4})(\d{0,4}).*/, '($1) $2-$3'); } else if (value.length > 0) { value = `(${value}`; } input.value = value; }
function formatarCnpjCpf(input) { let valor = input.value.replace(/\D/g, ''); if (valor.length <= 11) { valor = valor.replace(/(\d{3})(\d)/, '$1.$2'); valor = valor.replace(/(\d{3})(\d)/, '$1.$2'); valor = valor.replace(/(\d{3})(\d{1,2})$/, '$1-$2'); } else { valor = valor.replace(/^(\d{2})(\d)/, '$1.$2'); valor = valor.replace(/^(\d{2})\.(\d{3})(\d)/, '$1.$2.$3'); valor = valor.replace(/\.(\d{3})(\d)/, '.$1/$2'); valor = valor.replace(/(\d{4})(\d)/, '$1-$2'); } input.value = valor; }
const isEmailValid = (email) => { if (!email) return true; const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; return emailRegex.test(email); };
function formatarCampoMoeda(input) { let valor = input.value.replace(/\D/g, ''); if (valor === '') { input.value = ''; return; } valor = (parseInt(valor, 10) / 100).toFixed(2) + ''; valor = valor.replace('.', ','); valor = valor.replace(/(\d)(?=(\d{3})+(?!\d),)/g, '$1.'); input.value = valor; }
function parseCurrency(value) { if (!value) return 0; return parseFloat(String(value).replace(/\./g, '').replace(',', '.')) || 0; }
function formatarMoeda(valor) { return valor.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }

// --- FUN√á√ïES DE NAVEGA√á√ÉO E ESTADO ---
function showApp() { document.getElementById('login-container').classList.add('hidden'); document.getElementById('app-container').classList.remove('hidden'); document.body.style.alignItems = 'flex-start'; conectarEventosApp(); carregarClientes(); }
function showLogin() { document.getElementById('login-container').classList.remove('hidden'); document.getElementById('app-container').classList.add('hidden'); document.body.style.alignItems = 'center'; }
async function checkLoginStatus() { try { const response = await fetch('/api/session-check', { cache: 'no-cache' }); if (response.ok) { const data = await response.json(); if (data.loggedIn) { showApp(); } else { showLogin(); } } else { showLogin(); } } catch (error) { showLogin(); } }
function alternarAbas(abaAtiva) { const geradorContainer = document.getElementById('gerador-container'); const producaoContainer = document.getElementById('producao-container'); const btnNavGerador = document.getElementById('btnNavGerador'); const btnNavProducao = document.getElementById('btnNavProducao'); if (abaAtiva === 'producao') { geradorContainer.classList.add('hidden'); producaoContainer.classList.remove('hidden'); btnNavGerador.classList.remove('active'); btnNavProducao.classList.add('active'); carregarPainelProducao(); } else { geradorContainer.classList.remove('hidden'); producaoContainer.classList.add('hidden'); btnNavGerador.classList.add('active'); btnNavProducao.classList.remove('active'); } }

// --- FUN√á√ïES DE DADOS (CLIENTES, OR√áAMENTOS) ---
async function carregarClientes() { const select = document.getElementById('clienteExistente'); select.innerHTML = '<option value="">-- Carregando... --</option>'; try { const response = await fetch('/api/clientes', { cache: 'no-cache' }); if (!response.ok) throw new Error('Falha ao buscar clientes.'); const clientes = await response.json(); clientesCache = clientes; select.innerHTML = '<option value="">-- Novo Cliente --</option>'; clientes.forEach(cliente => { const option = new Option(`#${cliente.id} - ${cliente.nome}`, cliente.id); select.appendChild(option); }); } catch (error) { mostrarNotificacao(error.message, 'erro'); select.innerHTML = '<option value="">Erro ao carregar</option>'; } }
function selecionarCliente() { const select = document.getElementById('clienteExistente'); clienteSelecionadoId = select.value; orcamentoAtualId = null; const historicoSection = document.getElementById('historico-section'); const historicoContainer = document.getElementById('historico-container'); const clienteSelecionado = clientesCache.find(c => c.id == clienteSelecionadoId); const nomeInput = document.getElementById('clienteNome'); const cnpjCpfInput = document.getElementById('clienteCnpjCpf'); const emailInput = document.getElementById('clienteEmail'); const telefoneInput = document.getElementById('clienteTelefone'); if (clienteSelecionado) { nomeInput.value = clienteSelecionado.nome || ''; cnpjCpfInput.value = clienteSelecionado.cnpj_cpf || ''; emailInput.value = clienteSelecionado.email || ''; telefoneInput.value = clienteSelecionado.telefone || ''; formatarCnpjCpf(cnpjCpfInput); formatarTelefone(telefoneInput); } else { nomeInput.value = ''; cnpjCpfInput.value = ''; emailInput.value = ''; telefoneInput.value = ''; } if (clienteSelecionadoId) { historicoSection.style.display = 'block'; carregarHistoricoOrcamentos(clienteSelecionadoId); } else { historicoSection.style.display = 'none'; historicoContainer.innerHTML = ''; } }
async function salvarCliente() { const clienteNome = document.getElementById('clienteNome').value.trim(); const clienteEmail = document.getElementById('clienteEmail').value.trim(); if (!clienteNome) { mostrarNotificacao('O nome do cliente √© obrigat√≥rio.', 'erro'); return; } if (!isEmailValid(clienteEmail)) { mostrarNotificacao('O formato do e-mail √© inv√°lido.', 'erro'); return; } const clienteData = { nome: clienteNome, cnpj_cpf: document.getElementById('clienteCnpjCpf').value.trim(), email: clienteEmail, telefone: document.getElementById('clienteTelefone').value.trim(), }; try { const response = await fetch('/api/clientes', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(clienteData), }); if (response.ok) { mostrarNotificacao(`Cliente "${clienteNome}" salvo com sucesso!`, 'sucesso'); document.getElementById('clienteExistente').value = ""; selecionarCliente(); carregarClientes(); } else { const errorData = await response.json(); mostrarNotificacao(`Erro ao salvar cliente: ${errorData.error || 'Erro desconhecido'}`, 'erro'); } } catch (error) { console.error('Erro de conex√£o ao salvar cliente:', error); mostrarNotificacao('Erro de conex√£o. Tente novamente.', 'erro'); } }
function renderizarTabelaItens() { const container = document.getElementById('itensContainer'); if (itensOrcamento.length === 0) { container.innerHTML = `<div class="empty-state"><h3>Nenhum item adicionado</h3><p>Adicione itens ao or√ßamento.</p></div>`; } else { const tabelaHTML = ` <table class="items-table"> <thead><tr><th>Descri√ß√£o</th><th>Qtd</th><th>Valor Unit.</th><th>Total</th><th>A√ß√µes</th></tr></thead> <tbody> ${itensOrcamento.map(item => ` <tr> <td>${item.descricao}</td> <td>${item.quantidade}</td> <td>${formatarMoeda(item.valorUnitario)}</td> <td>${formatarMoeda(item.valorTotal)}</td> <td><button class="btn btn-danger btn-remover-item" data-id="${item.id}">üóëÔ∏è</button></td> </tr>`).join('')} </tbody> </table> `; container.innerHTML = tabelaHTML; } renderizarOuAtualizarTotais(); }
function renderizarOuAtualizarTotais() { const totaisContainer = document.getElementById('totaisContainer'); if (itensOrcamento.length === 0) { totaisContainer.innerHTML = ''; return; } if (!document.getElementById('total-section-id')) { totaisContainer.innerHTML = ` <div class="total-section" id="total-section-id"> <div class="form-grid" style="grid-template-columns: 2fr 1fr; gap: 10px; margin-bottom: 20px; text-align: left;"> <div class="form-group"> <label for="descontoValor" style="color: white;">Desconto</label> <input type="text" id="descontoValor" placeholder="0" style="padding: 12px 15px; border-radius: 10px; border: none; font-size: 1rem;"> </div> <div class="form-group"> <label for="descontoTipo" style="color: white;">Tipo</label> <select id="descontoTipo" style="padding: 12px 15px; border-radius: 10px; border: none; font-size: 1rem;"> <option value="dinheiro">R$</option> <option value="porcentagem">%</option> </select> </div> </div> <p style="font-size: 1rem; font-weight: 400; text-align: right;">Subtotal: <span id="subtotal-valor"></span></p> <p style="font-size: 1rem; font-weight: 400; text-align: right; margin-bottom: 10px;">Desconto: <span id="desconto-valor-display"></span></p> <h3 style="text-align: right;">Total Geral</h3> <p id="total-geral-valor" style="text-align: right;"></p> </div>`; } atualizarTotais(); }
function atualizarTotais() { if (itensOrcamento.length === 0 || !document.getElementById('total-section-id')) return; const subtotal = itensOrcamento.reduce((acc, item) => acc + item.valorTotal, 0); const descontoValorInput = document.getElementById('descontoValor').value; const descontoTipo = document.getElementById('descontoTipo').value; let descontoCalculado = 0; if (descontoTipo === 'dinheiro') { descontoCalculado = parseCurrency(descontoValorInput); } else { const porcentagem = parseFloat(descontoValorInput.replace(',', '.')) || 0; descontoCalculado = subtotal * (porcentagem / 100); } const totalGeral = subtotal - descontoCalculado; document.getElementById('subtotal-valor').textContent = formatarMoeda(subtotal); document.getElementById('desconto-valor-display').textContent = `- ${formatarMoeda(descontoCalculado)}`; document.getElementById('total-geral-valor').textContent = formatarMoeda(totalGeral); }
function adicionarItem() { const descricao = document.getElementById('itemDescricao').value.trim(); const quantidade = parseInt(document.getElementById('itemQuantidade').value); const valorUnitario = parseCurrency(document.getElementById('itemValorUnitario').value); if (!descricao || isNaN(quantidade) || quantidade <= 0 || isNaN(valorUnitario) || valorUnitario <= 0) { mostrarNotificacao('Preencha todos os campos do item com valores v√°lidos.', 'erro'); return; } const novoItem = { id: ++contadorItemId, descricao, quantidade, valorUnitario, valorTotal: quantidade * valorUnitario }; itensOrcamento.push(novoItem); renderizarTabelaItens(); document.getElementById('itemDescricao').value = ''; document.getElementById('itemQuantidade').value = '1'; document.getElementById('itemValorUnitario').value = ''; }
function removerItem(itemId) { itensOrcamento = itensOrcamento.filter(item => item.id !== itemId); renderizarTabelaItens(); }

async function carregarHistoricoOrcamentos(clienteId) {
    const container = document.getElementById('historico-container');
    container.innerHTML = '<p>Carregando hist√≥rico...</p>';
    try {
        const response = await fetch(`/api/orcamentos?cliente_id=${clienteId}`, { cache: 'no-cache' });
        if (!response.ok) throw new Error('Falha ao buscar hist√≥rico.');
        const orcamentos = await response.json();
        if (orcamentos.length === 0) { container.innerHTML = '<div class="empty-state">Nenhum or√ßamento salvo para este cliente.</div>'; return; }
        
        let html = '<ul style="list-style-type: none; padding: 0;">';
        orcamentos.forEach(o => {
            const data = new Date(o.data_criacao).toLocaleDateString('pt-BR');
            const totalPago = parseFloat(o.total_pago);
            const valorTotal = parseFloat(o.valor_total);
            let botoesAcao = '';

            // Define os bot√µes de a√ß√£o com base no status
            if (o.status === 'Criado' || o.status === 'Reprovado') {
                botoesAcao = `<button class="btn btn-primary btn-avancar-status" data-id="${o.id}" data-status="Aprovado" style="padding: 5px 10px; font-size: 0.8em;">Aprovar</button>`;
            } else if (o.status === 'Aprovado') {
                // Adiciona bot√£o "Registrar Pagamento" SE APROVADO
                botoesAcao = `
                    <button class="btn btn-success btn-registrar-pagamento-hist" data-id="${o.id}" data-total="${valorTotal}" data-pago="${totalPago}" style="padding: 5px 10px; font-size: 0.8em;">Pagamento</button>
                    <button class="btn btn-primary btn-iniciar-producao" data-id="${o.id}" data-pago="${totalPago}" style="padding: 5px 10px; font-size: 0.8em;">Iniciar Produ√ß√£o</button>
                `;
            } else if (o.status === 'Em Produ√ß√£o') {
                botoesAcao = `<button class="btn btn-success btn-avancar-status" data-id="${o.id}" data-status="Conclu√≠do" style="padding: 5px 10px; font-size: 0.8em;">Concluir</button>`;
            } else if (o.status === 'Conclu√≠do') {
                 // Adiciona bot√£o "Registrar Pagamento" SE CONCLU√çDO
                 botoesAcao = `<button class="btn btn-success btn-registrar-pagamento-hist" data-id="${o.id}" data-total="${valorTotal}" data-pago="${totalPago}" style="padding: 5px 10px; font-size: 0.8em;">Pagamento</button>`;
            }

            // Monta o HTML do item da lista
            html += `<li style="background: #e9ecef; padding: 10px; border-radius: 8px; margin-bottom: 8px; display: grid; grid-template-columns: 1fr repeat(4, auto); gap: 10px; align-items: center;"> 
                        <div> 
                            <span><strong>${o.codigo_orcamento || `ORC-${String(o.id).padStart(4, '0')}`}</strong> - ${data}</span><br> 
                            <span style="font-size: 0.9em; color: #525f7f;">Status: <strong>${o.status}</strong></span> 
                        </div> 
                        <button class="btn btn-secondary btn-ver-pdf" data-id="${o.id}" style="padding: 5px 10px; font-size: 0.8em;">Ver PDF</button> 
                        <button class="btn btn-secondary btn-editar-orcamento" data-id="${o.id}" style="padding: 5px 10px; font-size: 0.8em;">Editar</button> 
                        ${botoesAcao} 
                     </li>`;
        });
        html += '</ul>';
        container.innerHTML = html;
    } catch (error) { console.error("Erro ao carregar hist√≥rico:", error); container.innerHTML = '<p>Erro ao carregar o hist√≥rico.</p>'; }
}

async function atualizarStatusOrcamento(orcamentoId, novoStatus, dadosExtras = {}) { const confirmMessage = dadosExtras.numero_oc ? `Tem certeza que deseja iniciar a produ√ß√£o com a OC "${dadosExtras.numero_oc}"?` : `Tem certeza que deseja alterar o status para "${novoStatus}"?`; if (!confirm(confirmMessage)) return; try { const response = await fetch(`/api/orcamentos?orcamento_id=${orcamentoId}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ status: novoStatus, ...dadosExtras }) }); if (response.ok) { mostrarNotificacao('Status atualizado com sucesso!', 'sucesso'); if (clienteSelecionadoId) carregarHistoricoOrcamentos(clienteSelecionadoId); carregarPainelProducao(); } else { throw new Error('Falha ao atualizar o status.'); } } catch (error) { mostrarNotificacao('N√£o foi poss√≠vel atualizar o status.', 'erro'); } }
async function carregarOrcamentoParaEdicao(orcamentoId) { mostrarNotificacao('Carregando dados do or√ßamento para edi√ß√£o...', 'info'); try { const response = await fetch(`/api/orcamentos?orcamento_id=${orcamentoId}`, { cache: 'no-cache' }); if (!response.ok) throw new Error('N√£o foi poss√≠vel carregar os detalhes do or√ßamento.'); const orcamento = await response.json(); orcamentoAtualId = orcamento.id; itensOrcamento = orcamento.itens.map(item => ({ id: ++contadorItemId, descricao: item.descricao, quantidade: item.quantidade, valorUnitario: parseFloat(item.valor_unitario), valorTotal: item.quantidade * parseFloat(item.valor_unitario) })); renderizarTabelaItens(); const descontoTipo = document.getElementById('descontoTipo'); const descontoValor = document.getElementById('descontoValor'); if (descontoTipo && descontoValor) { descontoTipo.value = orcamento.desconto_tipo || 'dinheiro'; if (orcamento.desconto_tipo === 'porcentagem') { const subtotal = orcamento.itens.reduce((acc, item) => acc + (item.quantidade * parseFloat(item.valor_unitario)), 0); const porcentagem = subtotal > 0 ? (parseFloat(orcamento.desconto_valor) / subtotal) * 100 : 0; descontoValor.value = porcentagem.toFixed(2).replace('.', ','); } else { descontoValor.value = String(parseFloat(orcamento.desconto_valor).toFixed(2)).replace('.', ','); formatarCampoMoeda(descontoValor); } } document.getElementById('observacoes').value = orcamento.observacoes || ''; mostrarNotificacao('Or√ßamento carregado. Edite e clique em "Salvar Or√ßamento".', 'info'); } catch (error) { console.error("Erro ao carregar or√ßamento para edi√ß√£o:", error); mostrarNotificacao(error.message, 'erro'); } }
async function salvarOrcamento() { if (!clienteSelecionadoId) { mostrarNotificacao('Selecione um cliente para salvar.', 'erro'); return; } if (itensOrcamento.length === 0) { mostrarNotificacao('Adicione pelo menos um item.', 'erro'); return; } const subtotal = itensOrcamento.reduce((acc, item) => acc + item.valorTotal, 0); const descontoValorInput = document.getElementById('descontoValor').value; const descontoTipo = document.getElementById('descontoTipo').value; let descontoCalculado = 0; if (descontoTipo === 'dinheiro') { descontoCalculado = parseCurrency(descontoValorInput); } else { const porcentagem = parseFloat(descontoValorInput.replace(',', '.')) || 0; descontoCalculado = subtotal * (porcentagem / 100); } const valorTotal = subtotal - descontoCalculado; const orcamentoData = { cliente_id: clienteSelecionadoId, subtotal, desconto_valor: descontoCalculado, desconto_tipo: descontoTipo, valor_total: valorTotal, observacoes: document.getElementById('observacoes').value, itens: itensOrcamento.map(i => ({ descricao: i.descricao, quantidade: i.quantidade, valor_unitario: i.valorUnitario })) }; const isEditing = orcamentoAtualId !== null; const method = isEditing ? 'PUT' : 'POST'; const url = isEditing ? `/api/orcamentos?orcamento_id=${orcamentoAtualId}` : '/api/orcamentos'; try { const response = await fetch(url, { method: method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(orcamentoData) }); const result = await response.json(); if (response.ok) { mostrarNotificacao(result.message, 'sucesso'); carregarHistoricoOrcamentos(clienteSelecionadoId); carregarPainelProducao(); if (!isEditing) { orcamentoAtualId = result.orcamentoId; } } else { mostrarNotificacao(`Erro: ${result.error}`, 'erro'); } } catch (error) { mostrarNotificacao('Erro de conex√£o ao salvar or√ßamento.', 'erro'); } }

// --- FUN√á√ïES DE PDF ---
async function gerarPdfHistorico(orcamentoId) { mostrarNotificacao('Gerando PDF do or√ßamento salvo...', 'info'); try { const response = await fetch(`/api/orcamentos?orcamento_id=${orcamentoId}`, { cache: 'no-cache' }); if (!response.ok) throw new Error('N√£o foi poss√≠vel carregar os dados para gerar o PDF.'); const orcamentoCompleto = await response.json(); criarPDF(orcamentoCompleto); } catch(error) { mostrarNotificacao(error.message, 'erro'); console.error("Erro ao gerar PDF do hist√≥rico:", error); } }
function gerarPdfAtual() { const clienteNome = document.getElementById('clienteNome').value.trim(); if (!clienteNome || itensOrcamento.length === 0) { mostrarNotificacao('Selecione um cliente e adicione itens para gerar o PDF.', 'erro'); return; } const subtotal = itensOrcamento.reduce((acc, item) => acc + item.valorTotal, 0); const descontoValorInput = document.getElementById('descontoValor').value; const descontoTipo = document.getElementById('descontoTipo').value; let descontoCalculado = 0; if (descontoTipo === 'dinheiro') { descontoCalculado = parseCurrency(descontoValorInput); } else { const porcentagem = parseFloat(descontoValorInput.replace(',', '.')) || 0; descontoCalculado = subtotal * (porcentagem / 100); } const valorTotal = subtotal - descontoCalculado; const dadosAtuais = { id: orcamentoAtualId, codigo_orcamento: orcamentoAtualId ? `ORC-${String(orcamentoAtualId).padStart(4, '0')}` : 'Novo', cliente_nome: clienteNome, cliente_cnpj_cpf: document.getElementById('clienteCnpjCpf').value, cliente_email: document.getElementById('clienteEmail').value, cliente_telefone: document.getElementById('clienteTelefone').value, itens: itensOrcamento.map(i => ({ descricao: i.descricao, quantidade: i.quantidade, valor_unitario: i.valorUnitario })), subtotal, desconto_valor: descontoCalculado, desconto_tipo: descontoTipo, valor_total: valorTotal, observacoes: document.getElementById('observacoes').value, data_criacao: new Date() }; criarPDF(dadosAtuais); }
function criarPDF(orcamentoData) { const { jsPDF } = window.jspdf; const doc = new jsPDF(); const pageWidth = doc.internal.pageSize.width; const margin = 15; let yPosition = 20; const logoImg = new Image(); logoImg.crossOrigin = 'anonymous'; logoImg.onload = function() { const logoWidth = 30; const aspectRatio = this.naturalHeight / this.naturalWidth; const logoHeight = logoWidth * aspectRatio; const logoX = (pageWidth - logoWidth) / 2; doc.addImage(this, 'PNG', logoX, yPosition, logoWidth, logoHeight); yPosition += logoHeight + 5; continuarGeracaoPDF(doc, pageWidth, margin, yPosition, orcamentoData); }; logoImg.onerror = () => { yPosition += 10; continuarGeracaoPDF(doc, pageWidth, margin, yPosition, orcamentoData); }; logoImg.src = 'https://i.imgur.com/zerV906.png'; }
function continuarGeracaoPDF(doc, pageWidth, margin, yPosition, orcamentoData) { doc.setFontSize(22); doc.setFont('helvetica', 'bold'); doc.setTextColor(44, 62, 80); doc.text(`OR√áAMENTO ${orcamentoData.codigo_orcamento || `ORC-${String(orcamentoData.id).padStart(4, '0')}`}`, pageWidth / 2, yPosition, { align: 'center' }); yPosition += 15; const infoStartY = yPosition; let leftY = infoStartY; let rightY = infoStartY; const halfWidth = pageWidth / 2; doc.setFontSize(10); doc.setFont('helvetica', 'bold'); doc.setTextColor(44, 62, 80); doc.text('DADOS DA EMPRESA', margin, leftY); leftY += 5; doc.setLineWidth(0.2); doc.line(margin, leftY, halfWidth - margin / 2, leftY); leftY += 8; doc.setFontSize(9); doc.setFont('helvetica', 'normal'); doc.setTextColor(80, 80, 80); doc.setFont('helvetica', 'bold'); doc.text(document.querySelector('input[value="Fenix Fardamentos LTDA"]').value, margin, leftY); leftY += 6; doc.setFont('helvetica', 'normal'); doc.text(`CNPJ: ${document.querySelector('input[value="12.000.234/0001-18"]').value}`, margin, leftY); leftY += 5; doc.text(document.querySelector('input[value="Rua Pinheiro, 65 - Cidade Universit√°ria"]').value, margin, leftY); leftY += 5; doc.text(`Telefone: ${document.querySelector('input[value="(82) 98814-4752"]').value}`, margin, leftY); leftY += 5; doc.text(`E-mail: ${document.querySelector('input[value="fenixfardamentos.al@gmail.com"]').value}`, margin, leftY); leftY += 5; doc.setFontSize(10); doc.setFont('helvetica', 'bold'); doc.setTextColor(44, 62, 80); doc.text('DADOS DO CLIENTE', halfWidth, rightY); rightY += 5; doc.line(halfWidth, rightY, pageWidth - margin, rightY); rightY += 8; doc.setFontSize(9); doc.setFont('helvetica', 'normal'); doc.setTextColor(80, 80, 80); doc.setFont('helvetica', 'bold'); doc.text(orcamentoData.cliente_nome || '', halfWidth, rightY); rightY += 6; doc.setFont('helvetica', 'normal'); if (orcamentoData.cliente_email) { doc.text(`E-mail: ${orcamentoData.cliente_email}`, halfWidth, rightY); rightY += 5; } if (orcamentoData.cliente_telefone) { doc.text(`Telefone: ${orcamentoData.cliente_telefone}`, halfWidth, rightY); rightY += 5; } if (orcamentoData.cliente_cnpj_cpf) { doc.text(`CPF/CNPJ: ${orcamentoData.cliente_cnpj_cpf}`, halfWidth, rightY); rightY += 5; } yPosition = Math.max(leftY, rightY) + 15; const tableData = orcamentoData.itens.map((item, index) => [ index + 1, item.descricao, item.quantidade, formatarMoeda(parseFloat(item.valor_unitario)), formatarMoeda(item.quantidade * parseFloat(item.valor_unitario)) ]); doc.autoTable({ head: [['#', 'Descri√ß√£o', 'Qtd', 'V. Unit√°rio', 'Total']], body: tableData, startY: yPosition, theme: 'grid', headStyles: { fillColor: [244, 164, 96], textColor: [255, 255, 255], fontStyle: 'bold', halign: 'center' }, columnStyles: { 0: { halign: 'center', cellWidth: 10 }, 1: { halign: 'left' }, 2: { halign: 'center', cellWidth: 15 }, 3: { halign: 'right', cellWidth: 30 }, 4: { halign: 'right', cellWidth: 30 } }, }); yPosition = doc.previousAutoTable.finalY + 10; const subtotal = parseFloat(orcamentoData.subtotal); const descontoCalculado = parseFloat(orcamentoData.desconto_valor); const totalGeral = parseFloat(orcamentoData.valor_total); const totalBoxX = pageWidth / 2; doc.setFontSize(10); doc.setFont('helvetica', 'normal'); doc.setTextColor(80, 80, 80); doc.text(`Subtotal:`, totalBoxX, yPosition, { align: 'left' }); doc.text(formatarMoeda(subtotal), pageWidth - margin, yPosition, { align: 'right' }); yPosition += 7; doc.text(`Desconto:`, totalBoxX, yPosition, { align: 'left' }); doc.text(`- ${formatarMoeda(descontoCalculado)}`, pageWidth - margin, yPosition, { align: 'right' }); yPosition += 7; doc.setLineWidth(0.3); doc.setDrawColor(150, 150, 150); doc.line(totalBoxX, yPosition, pageWidth - margin, yPosition); yPosition += 8; doc.setFontSize(12); doc.setFont('helvetica', 'bold'); doc.setTextColor(44, 62, 80); doc.text('TOTAL GERAL:', totalBoxX, yPosition, { align: 'left' }); doc.text(formatarMoeda(totalGeral), pageWidth - margin, yPosition, { align: 'right' }); const observacoes = orcamentoData.observacoes; if (observacoes) { yPosition += 15; const obsLines = doc.splitTextToSize(observacoes, pageWidth - margin * 2); if (yPosition + (obsLines.length * 5) + 15 > doc.internal.pageSize.height - 20) { doc.addPage(); yPosition = 20; } doc.setFontSize(10); doc.setFont('helvetica', 'bold'); doc.setTextColor(44, 62, 80); doc.text('OBSERVA√á√ïES', margin, yPosition); yPosition += 8; doc.setFontSize(9); doc.setFont('helvetica', 'normal'); doc.setTextColor(80, 80, 80); doc.text(obsLines, margin, yPosition); } const dataEmissao = new Date(orcamentoData.data_criacao).toLocaleDateString('pt-BR'); for (let i = 1; i <= doc.internal.getNumberOfPages(); i++) { doc.setPage(i); const pageHeight = doc.internal.pageSize.height; doc.setFontSize(8); doc.setTextColor(120, 120, 120); doc.text(`Emitido em: ${dataEmissao}`, margin, pageHeight - 10); doc.text(`P√°gina ${i} de ${doc.internal.getNumberOfPages()}`, pageWidth - margin, pageHeight - 10, { align: 'right' }); } doc.output('dataurlnewwindow'); }

// --- FUN√á√ïES DO PAINEL KANBAN E PAGAMENTOS ---
async function carregarPainelProducao() { mostrarNotificacao('Atualizando painel...', 'info'); const colunas = { aprovado: document.getElementById('coluna-aprovado'), 'em-produ√ß√£o': document.getElementById('coluna-em-producao'), conclu√≠do: document.getElementById('coluna-concluido'), }; Object.values(colunas).forEach(c => c.innerHTML = ''); try { const response = await fetch('/api/orcamentos?painel_producao=true', { cache: 'no-cache' }); if (!response.ok) throw new Error('Falha ao carregar dados de produ√ß√£o.'); const orcamentos = await response.json(); if(orcamentos.length === 0) { document.getElementById('coluna-aprovado').innerHTML = '<div class="empty-state">Nenhum pedido nos est√°gios de produ√ß√£o.</div>'; document.getElementById('coluna-em-producao').innerHTML = ''; document.getElementById('coluna-concluido').innerHTML = '';} orcamentos.forEach(o => { const statusKey = o.status.toLowerCase().replace(' ', '-'); if (colunas[statusKey]) { const card = document.createElement('div'); card.className = 'kanban-card'; let paymentStatusHTML = ''; const totalPago = parseFloat(o.total_pago); const valorTotal = parseFloat(o.valor_total); if (totalPago >= valorTotal) { paymentStatusHTML = '<span class="payment-status status-pago">Pago</span>'; } else if (totalPago > 0) { paymentStatusHTML = `<span class="payment-status status-parcial">Parcial (${formatarMoeda(totalPago)})</span>`; } else { paymentStatusHTML = '<span class="payment-status status-pendente">Pendente</span>'; } card.innerHTML = ` <h4>${o.codigo_orcamento}</h4> <p>${o.cliente_nome}</p> <p><strong>Total: ${formatarMoeda(valorTotal)}</strong> ${paymentStatusHTML}</p> <div class="kanban-card-footer"> <button class="btn btn-secondary btn-visualizar-kanban" data-id="${o.id}">Detalhes</button> ${o.status === 'Conclu√≠do' ? `<button class="btn btn-success btn-registrar-pagamento" data-id="${o.id}" data-total="${valorTotal}" data-pago="${totalPago}">Pagamento</button>` : ''} </div> `; colunas[statusKey].appendChild(card); } }); } catch (error) { mostrarNotificacao(error.message, 'erro'); } }
async function salvarPagamento() { const valorPago = parseCurrency(document.getElementById('inputValorPago').value); if (!valorPago || valorPago <= 0) { mostrarNotificacao('Insira um valor de pagamento v√°lido.', 'erro'); return; } const dadosPagamento = { orcamento_id: orcamentoParaAcaoId, valor_pago: valorPago, metodo_pagamento: document.getElementById('selectMetodoPagamento').value, observacoes: document.getElementById('inputObsPagamento').value, }; try { const response = await fetch('/api/pagamentos', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(dadosPagamento), }); if (response.ok) { mostrarNotificacao('Pagamento registrado com sucesso!', 'sucesso'); document.getElementById('pagamentoModal').style.display = 'none'; // Fecha o modal
            if (clienteSelecionadoId) carregarHistoricoOrcamentos(clienteSelecionadoId); // Atualiza hist√≥rico se estiver vis√≠vel
            carregarPainelProducao(); // Atualiza o painel Kanban
        } else { throw new Error('Falha ao registrar o pagamento.'); } } catch (error) { mostrarNotificacao(error.message, 'erro'); } }
function novoOrcamento() { itensOrcamento = []; renderizarTabelaItens(); document.getElementById('itemDescricao').value = ''; document.getElementById('itemQuantidade').value = '1'; document.getElementById('itemValorUnitario').value = ''; document.getElementById('observacoes').value = 'Forma de pagamento: 50% na encomenda e 50% na entrega. Prazo de entrega: 30 dias a partir da confirma√ß√£o do pedido.'; orcamentoAtualId = null; mostrarNotificacao('Formul√°rio limpo. Pronto para um novo or√ßamento!', 'info'); }

// --- INICIALIZA√á√ÉO E EVENTOS ---
function conectarEventosApp() {
    document.getElementById('btnNavGerador').addEventListener('click', () => alternarAbas('gerador'));
    document.getElementById('btnNavProducao').addEventListener('click', () => alternarAbas('producao'));
    document.getElementById('btnAtualizarPainel').addEventListener('click', carregarPainelProducao);
    document.querySelectorAll('.btn-close').forEach(btn => btn.addEventListener('click', () => btn.closest('.modal-overlay').style.display = 'none'));
    document.getElementById('clienteExistente').addEventListener('change', selecionarCliente);
    document.getElementById('btnSalvarCliente').addEventListener('click', salvarCliente);
    document.getElementById('clienteCnpjCpf').addEventListener('input', (e) => formatarCnpjCpf(e.target));
    document.getElementById('clienteTelefone').addEventListener('input', (e) => formatarTelefone(e.target));
    document.getElementById('itemValorUnitario').addEventListener('input', (e) => formatarCampoMoeda(e.target));
    document.getElementById('btnAdicionarItem').addEventListener('click', adicionarItem);
    document.getElementById('itensContainer').addEventListener('click', (e) => { const target = e.target.closest('button'); if (target && target.classList.contains('btn-remover-item')) { const itemId = parseInt(target.dataset.id, 10); removerItem(itemId); } });
    document.getElementById('totaisContainer').addEventListener('input', (e) => { if (e.target && e.target.id === 'descontoValor') { atualizarTotais(); } });
    document.getElementById('totaisContainer').addEventListener('change', (e) => { if (e.target && e.target.id === 'descontoTipo') { atualizarTotais(); } });
    document.getElementById('historico-container').addEventListener('click', (e) => { const target = e.target.closest('button'); if (!target) return; const orcamentoId = target.dataset.id; orcamentoParaAcaoId = orcamentoId; // Guarda o ID para qualquer a√ß√£o
        if (target.classList.contains('btn-ver-pdf')) { gerarPdfHistorico(orcamentoId); }
        else if (target.classList.contains('btn-editar-orcamento')) { carregarOrcamentoParaEdicao(orcamentoId); }
        else if (target.classList.contains('btn-registrar-pagamento-hist')) { const total = parseFloat(target.dataset.total); const pago = parseFloat(target.dataset.pago); document.getElementById('pagamentoModalTitle').textContent = `Saldo Devedor: ${formatarMoeda(total - pago)}`; document.getElementById('pagamentoModal').style.display = 'flex'; }
        else if (target.classList.contains('btn-iniciar-producao')) { const totalPago = parseFloat(target.dataset.pago); if (totalPago <= 0) { mostrarNotificacao('ERRO: Pagamento inicial n√£o registrado.', 'erro'); return; } document.getElementById('ocModal').style.display = 'flex'; }
        else if (target.classList.contains('btn-avancar-status')) { const novoStatus = target.dataset.status; atualizarStatusOrcamento(orcamentoId, novoStatus); } });
    document.getElementById('kanban-board').addEventListener('click', (e) => { const target = e.target.closest('button'); if (!target) return; orcamentoParaAcaoId = target.dataset.id; if (target.classList.contains('btn-visualizar-kanban')) { alternarAbas('gerador'); carregarOrcamentoParaEdicao(orcamentoParaAcaoId); } if (target.classList.contains('btn-registrar-pagamento')) { const total = parseFloat(target.dataset.total); const pago = parseFloat(target.dataset.pago); document.getElementById('pagamentoModalTitle').textContent = `Saldo Devedor: ${formatarMoeda(total - pago)}`; document.getElementById('pagamentoModal').style.display = 'flex'; } });
    document.getElementById('btnConfirmarOC').addEventListener('click', () => { const numeroOC = document.getElementById('inputNumeroOC').value; if (!numeroOC) { mostrarNotificacao('O n√∫mero da OC √© obrigat√≥rio.', 'erro'); return; } atualizarStatusOrcamento(orcamentoParaAcaoId, 'Em Produ√ß√£o', { numero_oc: numeroOC }); document.getElementById('ocModal').style.display = 'none'; });
    document.getElementById('btnSalvarPagamento').addEventListener('click', salvarPagamento);
    document.getElementById('inputValorPago').addEventListener('input', (e) => formatarCampoMoeda(e.target));
    document.getElementById('btnNovoOrcamento').addEventListener('click', novoOrcamento);
    document.getElementById('btnGerarPDF').addEventListener('click', gerarPdfAtual);
    document.getElementById('btnSalvarOrcamento').addEventListener('click', salvarOrcamento);
}

document.addEventListener('DOMContentLoaded', () => {
    const loginForm = document.getElementById('login-form');
    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const errorMessage = document.getElementById('error-message');
            const username = document.getElementById('username').value;
            const password = document.getElementById('password-login').value;
            errorMessage.textContent = '';
            try {
                const response = await fetch('/api/auth', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ username, password }) });
                if (response.ok) {
                    showApp();
                } else {
                    const data = await response.json();
                    errorMessage.textContent = data.error || 'Credenciais inv√°lidas.';
                }
            } catch (error) {
                errorMessage.textContent = 'Erro de conex√£o. Tente novamente.';
            }
        });
    }
    checkLoginStatus();
});
